# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redis_consumer.pbs.process_pb2 as process__pb2


class ProcessingServiceStub(object):
  """ProcessingService provides access to data processing functions
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Process = channel.unary_unary(
        '/tensorflow.serving.ProcessingService/Process',
        request_serializer=process__pb2.ProcessRequest.SerializeToString,
        response_deserializer=process__pb2.ProcessResponse.FromString,
        )


class ProcessingServiceServicer(object):
  """ProcessingService provides access to data processing functions
  """

  def Process(self, request, context):
    """Process -- provides access to a data processing function
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProcessingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Process': grpc.unary_unary_rpc_method_handler(
          servicer.Process,
          request_deserializer=process__pb2.ProcessRequest.FromString,
          response_serializer=process__pb2.ProcessResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tensorflow.serving.ProcessingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
