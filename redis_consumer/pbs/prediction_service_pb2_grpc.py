# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redis_consumer.pbs.get_model_metadata_pb2 as get__model__metadata__pb2
import redis_consumer.pbs.predict_pb2 as predict__pb2


class PredictionServiceStub(object):
  """open source marker; do not remove
  PredictionService provides access to machine-learned models loaded by
  model_servers.
  Classify.
  rpc Classify(ClassificationRequest) returns (ClassificationResponse);
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Predict = channel.unary_unary(
        '/tensorflow.serving.PredictionService/Predict',
        request_serializer=predict__pb2.PredictRequest.SerializeToString,
        response_deserializer=predict__pb2.PredictResponse.FromString,
        )
    self.GetModelMetadata = channel.unary_unary(
        '/tensorflow.serving.PredictionService/GetModelMetadata',
        request_serializer=get__model__metadata__pb2.GetModelMetadataRequest.SerializeToString,
        response_deserializer=get__model__metadata__pb2.GetModelMetadataResponse.FromString,
        )


class PredictionServiceServicer(object):
  """open source marker; do not remove
  PredictionService provides access to machine-learned models loaded by
  model_servers.
  Classify.
  rpc Classify(ClassificationRequest) returns (ClassificationResponse);
  """

  def Predict(self, request, context):
    """Regress.
    rpc Regress(RegressionRequest) returns (RegressionResponse);

    Predict -- provides access to loaded TensorFlow model.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetModelMetadata(self, request, context):
    """MultiInference API for multi-headed models.
    rpc MultiInference(MultiInferenceRequest) returns (MultiInferenceResponse);

    GetModelMetadata - provides access to metadata for loaded models.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PredictionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=predict__pb2.PredictRequest.FromString,
          response_serializer=predict__pb2.PredictResponse.SerializeToString,
      ),
      'GetModelMetadata': grpc.unary_unary_rpc_method_handler(
          servicer.GetModelMetadata,
          request_deserializer=get__model__metadata__pb2.GetModelMetadataRequest.FromString,
          response_serializer=get__model__metadata__pb2.GetModelMetadataResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tensorflow.serving.PredictionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
